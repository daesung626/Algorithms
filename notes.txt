Algorithms

How to improve
1. Devise a plan
2. Master common problem

1. Understand the problem
    - Can you restate the problem in your own words
    - What are the inputs
    - What are the outputs
2. Concrete examples
    - Start with simple examples
    - Progress to more complex examples
    - Try empty inputs
    - Try invalid inputs
3. Break it down
    - Explicity write out the steps
4. Solve/Simplify
5. Look back/refactor 

Patterns
1. Frequency counter
    - ex. Anagram challenge
2. Multiple pointers
3. Sliding window
    - Useful for keeping track of a subset of data in an array/string
4. Divide and conquer

Recursion
- A process that calls itself
- Needs a base case to know when to return 
- Ex)
    function factorial(num) {
        if(num === 1) return 1;
        return num * factorial(num-1)
    }

Linear search 
- O(n)

Binary search
- Only works on sorted arrays
- O(log n)

Bubble sort
- Swapping to sort one by one
- O(n^2)

Selection sort
- Finds min and swaps it with front
- O(n^2)

Insertion sort
- Takes an element one at a time and inserts it in the correct spot
- O(n^2)

Merge sort
- Breaks down into multiple arrays and merges them back
- O(n log n)

Quick sort
- Finds the spot where number belongs and swaps
- Average O(n log n), worst O(n^2)

Radix sort
- Doesn't make comparisons
- Need to know the number at a certain position
- O(nk)