Algorithms

How to improve
1. Devise a plan
2. Master common problem

1. Understand the problem
    - Can you restate the problem in your own words
    - What are the inputs
    - What are the outputs
2. Concrete examples
    - Start with simple examples
    - Progress to more complex examples
    - Try empty inputs
    - Try invalid inputs
3. Break it down
    - Explicity write out the steps
4. Solve/Simplify
5. Look back/refactor 

Patterns
1. Frequency counter
    - ex. Anagram challenge
2. Multiple pointers
3. Sliding window
    - Useful for keeping track of a subset of data in an array/string
4. Divide and conquer

Recursion
- A process that calls itself